/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package phantomnetbean.Client;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.net.Socket;
import javafx.util.Pair;
import phantomnetbean.Client.ActionCard.ActionCard;
import phantomnetbean.Client.Card.Card;
import phantomnetbean.Client.Personal.Characters;
import phantomnetbean.Client.Personal.Player;
import phantomnetbean.Client.Personal.Role;

/**
 *
 * @author Apichart
 */
public class GameControlPanel extends javax.swing.JFrame {
    private boolean isRunning ;
     private Client client;
     private Player clientPlayer;
     private Protocol protocol ;
    /**
     * Creates new form GameControlPanel
     */
    public GameControlPanel(Player clientplayer , Client soc ,ObjectInputStream sac) {
        initComponents();
        this.clientPlayer = clientplayer;
        isRunning = true;
        client=soc;
        this.protocol = new Protocol();
          new ClientRecivingThread(client.getSocket(),sac,clientplayer).start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 719, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 528, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {                                   
        // TODO add your handling code here:
         Client.getGameClient().sendToServer(new Protocol().ExitMessagePacket(clientPlayer.getPlayerId()));
       System.exit(0);
    }                                  

public class ClientRecivingThread extends Thread
    {
        Socket clientSocket;
        //DataInputStream reader;
        ObjectInputStream objectInputStream ;
        Player clientPlayer ;
        public ClientRecivingThread(Socket clientSocket ,ObjectInputStream sac ,Player sd) 
        {
                this.clientSocket = clientSocket;
                this.objectInputStream = sac;  
                this.clientPlayer = sd;
        }
        public void run() 
        {
            while(isRunning) 
            {
                Object sentence = null;
                try {
                     sentence=objectInputStream.readObject();                
                } catch (IOException | ClassNotFoundException ex) {
                    ex.printStackTrace();
                }                
                if(sentence instanceof  String){
                    System.out.println(sentence.toString());
                    if(sentence.toString().startsWith("Name"))
                    {
                       String substring = sentence.toString().substring(sentence.toString().indexOf("|")+1);
//                       Name1.setText(substring.toString().substring(0,substring.indexOf(",")));
//                       substring = substring.substring(substring.indexOf(",")+1);
//                       Name2.setText(substring.substring(0,substring.indexOf(",")));
//                       substring = substring.substring(substring.indexOf(",")+1);
//                       Name3.setText(substring.substring(0,substring.indexOf(",")));
//                       substring = substring.substring(substring.indexOf(",")+1);
//                       Name4.setText(substring.substring(0,substring.indexOf(",")));
//                       substring = substring.substring(substring.indexOf(",")+1);
//                       Name5.setText(substring.substring(0,substring.indexOf(",")));
                    }else if(sentence.toString().startsWith("NewRole")){
                           try {
                               sentence=objectInputStream.readObject();  
                               if(sentence instanceof Role){
                                   this.clientPlayer.setRole((Role) sentence);
                           }
                     } catch (IOException | ClassNotFoundException ex) {
                         ex.printStackTrace();
                     } 
                    }else if(sentence.toString().startsWith("NewCharacter")){
                           try {
                               sentence=objectInputStream.readObject();  
                               if(sentence instanceof Characters.Character){
                                   this.clientPlayer.setCharacter((Characters.Character) sentence);
                               }
                     } catch (IOException | ClassNotFoundException ex) {
                         ex.printStackTrace();
                     }      
                    }else if(sentence.toString().startsWith("BuildHand")){
                          try {
                               sentence=objectInputStream.readObject();  
                               if(sentence instanceof Pair ){
                                   System.out.println(sentence.toString());
                                   this.clientPlayer.setHand((Pair<Card,ActionCard>)sentence);
                               }
                     } catch (IOException | ClassNotFoundException ex) {
                         ex.printStackTrace();
                     }      
                    }else if(sentence.toString().startsWith("SelectCycle")){
                         System.out.println("Cycle");
                    }
                }
            }
           
            try {
                objectInputStream.close();
                clientSocket.close();
            } catch (IOException ex) {
                ex.printStackTrace();
            }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
}